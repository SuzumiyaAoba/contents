#+title: Hono SSG
#+date: 2024-02-17
#+tags[]: Hono SSG プログラミング
#+categories[]: プログラミング
#+draft: false

** TL;DL

+ Hono に SSG (Static Site Generation) 機能が追加された
  + [[https://zenn.dev/yusukebe/articles/b20025ebda310a][Honoのv4が2月9日にリリースされます]]
+ このサイトの生成を Astro から Hono SSG に切り替えた
+ 最低限のことはできるけどリリースされて1週間くらいなので SSG として不足しているものはある

** Hono SSG

Hono に SSG 機能が追加されました。
Hono 自体は「[[https://zenn.dev/yusukebe/articles/0c7fed0949e6f7][Hono[炎]っていうイケてる名前のフレームワークを作っている]]」を昔読んだので知っていたが触る機会がなかった。
業務では専ら Java を書いているので TypeScript/JavaScript の新しいライブラリ、フレームワークに触るための機会は土日くらいにしかない。

さて、Hono の SSG について感想をつらつらと書いてみる。
まず、SSG の導入は楽だ。基本的には公式ドキュメントの通り `ssgParams` をルーティングしている部分に追加し、
SSG でレンダリングしたいリクエストパラメータのパターンを生成し、Vite の設定に [[https://github.com/honojs/vite-plugins/tree/main/packages/ssg][@hono/vite-ssg]] を追加してあげればよい。
これだけで HTML ファイルを生成してくれるようになる。

具体的なコードについて[[https://github.com/SuzumiyaAoba/SuzumiyaAoba.github.io/tree/657b39d6e78dbf3d6f882ba6bb6fd5d113f43ea8][リポジトリ]]を見てもらうのがいいと思う。
リリースされて時間の経っていない機能だし、改善もされていくから現時点での情報は直ぐに陳腐化してしまう。
そのため、基本的には[[https://hono.dev/helpers/ssg][公式ドキュメント]]をあたるのが最善だろう。

さて、導入は楽ではあるものの落とし穴はないだろうか。
当然のように落とし穴はある。しかし、これから書く内容は Hono の責任ではない。
Markdown で書いた文章を SSG で HTML に変換しようとしたとき直面してしまう一般的な問題だ。

*** Browser Sync

Markdown を使った文章の書き方は人それぞれではあると思うが、
私のようにエディタで文章を書きつつ、ファイルが保存される度にブラウザで変更された文章の
実際のレンダリングを確認しつつ書くようにしている人は多いのではないだろうか。

文章を書くだけであれば、Markdown ファイルだけを見ていれば十分ではあるはずだが、
CSS が当てられた結果や改行や段落による文字の見え方を確認しつつ書きたくなる心理がある。
この機能を実現するためには、常にサイト全体をビルドし直し、その度にブラウザが更新されるようにするか、
更新されたファイルの影響を受けるページであればそのエンドポイントへリクエストして更新させるようにしないといけないだろう。

現時点ではこのあたりがサポートされていないため手動で更新するようにしている。
Vite の設定が上手くできていないのが原因だとは思うが Vite の `preview` や `build --watch`、
`vite-plugin-browser-sync`、以下のスニペットを組み合せても望むような結果が得られなかった。

#+begin_src js
    {
      name: "watch-external",
      async buildStart() {
        const files = globSync("content/**/*.md");
        for (const file of files) {
          this.addWatchFile(file);
        }
      },
    },
#+end_src

少々不便ではあるため Browser Sync を直接利用する形で解決できないか模索していこうと思う。

*** 画像の配信

さて、次に画像の配信だ。これには二つの問題がある。

**** Hono における画像の扱い

Hono で以下のようなコードを書いて画像を返そうとするとデータが破損した。

#+begin_src js
app.get("/image.png", async (c) => {
  c.header("Content-Type", "image/png");

  c.body(fs.readFileSync("static/image.png"));
});
#+end_src

原因はわからなかった。Base64 にエンコードされてしまったのかとも思ったが
レスポンスを見るとバイナリデータではあった。
バグの可能性もあるがとりあえず Astro からの移行を完了させることを優先したので原因を深く探るのではなく別の手段を取ることにした。

...

少し待って欲しい。画像を返すのであれば [[https://hono.dev/getting-started/nodejs#serve-static-files][serveStatic]] があるじゃない！

=serveStatic= では満たせない用途があるのです。
このサイトのような SSG による生成を行うブログはメリットをそこまで享受できなかったとして
Lighthouse の気にするのです。

結果として画像には =picture= を使うし、画像の形式は WebP と PNG の両方をサポートする。
そのため、画像を事前に WebP に変換して管理しておくか、SSG のタイミングで画面幅の最大値に合わせて画像変換を行う。
こだわり始めると[[https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images][レスポンシブイメージ]]対応を真面目にやる。

それで得られるメリットは？

=¯\_(ツ)_/¯=

気にしたら負け。

そんなわけで完全に SSG 目的で Hono を使おうとするとリクエストが来たタイミングで画像変換をするようなエンドポイントが欲しくなる。
でも書けないわけですよ、これが。
調査不足なだけの可能性があるが、レスポンスヘッダにバイナリデータで扱われるようなデータの =Content-Type= を設定するとレスポンスデータがどいうも壊れてしまう。
リクエストを返す前にファイルに書き出すと正常なデータだが Hono から返ってくるデータが壊れてしまうので諦めて =rollup-plugin-copy= を使ってビルド時にすべての画像を変換して `public` ディレクトリに書き出す方法を取ることにした。
これは妥協なので将来的には別の方法を模索していきたい。

=serveStatic= があるとは言ったものの、以下のコードでは 404 となってしまい上手く動作しなかった。

#+begin_src js
app.use("/blog/*", serveStatic({ root: "./content" }));
#+end_src

**** 複数の静的コンテンツディレクトリ

一つ目の問題は静的コンテンツを複数ディレクトリに置いていなければ出会わない。
なぜなら、静的コンテンツを一つのディレクトリ配下に置いているのであれば、
そのディレクトリを Vite の =publicDir= に設定し、

#+begin_src js
import devServer from "@hono/vite-dev-server";

export default defineConfig({
  // ...
  plugin: [
    // ...
    devServer({
      entry: "src/index.tsx",
      exclude: ["your static content directory", ...defaultOptions.exclude],
    }),
  ]
});
#+end_src

このサイトでは以下のようなディレクトリ構造で管理している。

#+begin_src markdown
.
├── content
│   └── blog
│       ├── 2023-09-30-astro
│       │   └── images
│       ├── 2023-09-30-markdown
│       ├── 2023-10-07-lambda
│       ├── 2023-10-21-semigroup
│       ├── 2023-10-28-weekly
│       ├── 2023-11-05-weekly
│       ├── 2023-11-12-weekly
│       ├── 2023-11-26-weekly
│       ├── 2023-12-10-lofree-flow
│       ├── 2023-12-17-nix
│       ├── 2023-12-27-ErgoDash
│       │   └── images
│       ├── 2024-01-03-s-and-p-500
│       │   └── images
│       ├── 2024-02-03-aozora
│       │   └── images
│       └── 2024-02-17-hono
├── public
│   └── assets
│       └── css
│           └── starry-night
└── src
    ├── components
    ├── layouts
    ├── libs
    │   └── components
    ├── pages
    ├── repositories
    ├── styles
    └── types
        └── @microflash

35 directories
#+end_src

マークダウンファイルを =src= 配下で管理することを前提にしたフレームワークを良くみかけるが個人的にはこれは好まない。
Markdown フォーマットで書いたコードをソースコードを同じ階層で管理したくない、という好みの問題でしかないが…。
また、[[https://mdxjs.com/][MDX]] についても同様に可能な限り利用しないようにしている。
Markdown ファイルが JSX で書かれたコンポーネントに依存するなどけしからん。
そういうことがしたいなら [[https://developer.mozilla.org/ja/docs/Web/API/Web_components][Web Components]] という Web 標準技術があるだろう :rage:

そうは思わないだろうか。

話が横に逸れてしまった。画像の話に戻ろう。
=content/blog/= では記事ごとにディレクトリを作成し、その配下に =index.md= を置いている。
上記の =tree= ではファイルを省略しているためリストアップされていない。
そして、記事ディレクトリごとに =images= ディレクトリを作成し、記事内で利用される画像を置くようにしている。

その結果 =public= にも静的コンテツを置いているし、 =content= にある記事ごとのディレクトリでも =images= に静的コンテンツを置いていることになる。
Vite では =publicDir= には一つのディレクトリしか置けないので何かしらの対策を講じなければならない。
今回は前述の通り、Vite の設定で画像については =public= に変換してコピーするようにして解決している。
元々は WebP 形式に変換するため手段であったか、仮に PNG や JPEG 形式のままであったとしても何かしらの対応は必要だった。

記事を書きながら [[https://github.com/nguyenbatranvan/vite-multiple-assets][nguyenbatranvan/vite-multiple-assets: npm package]] というプラグインが [[https://github.com/vitejs/vite/discussions/5129][Multiple folders of static content? · vitejs/vite · Discussion #5129]] で紹介されていたので後日試してみようと思う。

** 感想

何はともあれ [[https://astro.build/][Astro]] のようなフレームワークの SSG と比較すると厳しい部分はありつつも Hono 自体がとても薄いフレームワークになっているため、困ったことがあっても仕組みが複雑ではないため、考えたことをそのままコードに落とすだけでよかった。

JSX はあまり好きではないが、現代においてここまで広がってしまった以上は JSX という構文は継続して使い続けられるものと考えた方がいいのだろう。
Hono SSG への移行の副目的として JSX による UI の管理があったのでそれが達成できてよかった。
