#+title: org-mode で記事を書く
#+date: 2024-03-25
#+tags[]: Emacs ブログ プログラミング
#+categories[]: Emacs
#+draft: false

** TL;DL

+ [[https://github.com/rasendubi/uniorg][uniorg]] を使うと Org Mode で書かれた文章を処理できる
+ このブログの記事も Org Mode で書いている
+ ox-publish よりも自由度が高いので ox-publish に不満がある人におすすめ

** プロローグ

できるだけ更新頻度を上げたいと思いつつも上げられない日々が続いている。
ブログの更新が滞ってしまっている理由は次の通り。

+ 面倒
+ ネタがない
+ ブログの機能が十分に整備できていない
+ モチベーションが上がらない

最も大きな要因は一つ目だろう。
二番目については嘘だ。書きたいことはいくらでもある。言い訳はよくない。
三番目は記事の執筆と直接影響がないように思えるが深刻な問題だ。

このサイトは SEO 対策を全くしていないので記事を書いたところで Google の検索に載らないのだ。
Search Console で確認してもインデックスに載っている URL は二つだけ。悲しい :cry:

今のところ載せている記事も散文くらいなので、検索汚染をしていないという点では優秀だといえよう :smile:

冗談はそれくらいにして、一番の問題である手間とモチベーション向上のため、一瞬だけ [[https://gohugo.io/][Hugo]] に浮気をした。
Hugo を選んだ理由は [[https://orgmode.org/ja/][Org Mode]] で文章を書けるからだ。
[[blog://2024-02-25-emacs-tab-bar-mode][tab-bar-mode の紹介記事]] で触れたが、最近は Emacs の設定を見直している。
その過程で Org Mode の活用を考えている。
大学時代を含め、これまでも Org Mode は活用したいと常に考えていた。
それでも中々活用できず歯痒い思いをし続けてきたわけだが、
ここにきて Emacs を使うモチベーションも上がってきているのでこの勢いに任せて
Org Mode を普段のワークフローに組み込んでいきたいと思った。
そのための対応の一環としてブログの記事も Org Mode で書くことにした。

ブログの記事を Markdown で書いても Org Mode で書いても変わらないように思うかもしれないが、
あなたが Emacs ユーザであれば Markdown よりも Org Mode で文章を書きたいと思うはずだ。

なぜなら、 =markdown-mode= 比べて =org-mode= の方が Emacs で書くときの環境を良くできるからだ。
もしかしたら =markdown-mode= でも同じよなことはできるのかもしれない。
それでも Emacs においては恐らく =org-mode= に対するサポートの方が手厚いだろう。

[[./images/org-mode.png]]

** Hugo に対する不満

Org Mode を最初からサポートしている SSG フレームワークとして有名なのは Hugo だ。
Org Mode で SSG するなら ox-publish か Hugo のどちらか、
という認識の Emacs ユーザは私以外にもいるでのはないだろうか。

そんなわけで Hugo へ移行してみたのだが不満があった。
基本方針として既存のテーマを使って対応しようとしたのだが、やはり細かいところの自由が効かない。
気になる点があった場合に修正するのが難しい。
技術的に難しいでのはなく、既存のテーマを弄るというのが継続可能性の点で問題になる。

*** テーマの管理

Hugo ではテーマを追加する場合は =git submodule= を使ってテーマリポジトリを
git 管理下に追加して利用するのが推奨される方法だ。
そして、テーマに対して手を加える場合は、利用しているテーマのディレクトリ構造と
カスタマイズしたいファイルの構造を一致させることで既存のテーマファイルを
上書くような動作をさせることができる。

しかし、この方法は本当によいカスタマイズ方法なのだろうか。
個人的にはとても疑問に思う。
利用しているテーマの更新は =git submodule= で remote の状態を pull してくることで行えるが、
もし利用しているテーマに破壊的な変更が加えられていた場合、
改めてカスタマイズしたいファイルをコピーして変更を適用しなければならない。

これは Hugo に限らず、いわゆるテーマなるものが配布されて、
それを利用するようなソフトウェアの宿命ではあるのだろう。
結局のところ道を外れるのであれば、最後までケツを持たなければならず、
それなら最初から自分で組み立てていった方が時間はかかるものの、
すべてを自分の裁量で決めることができ、何をするにも自由というわけだ。
勿論イニシャルコストは馬鹿にならないが…。

*** 画像の変換

[[blog://2024-02-17-hono][Hono SSG]] で触れたように個人的にユーザが必要としないようなサイズの画像を載せるのは可能な限り避け、
画像フォーマットについても軽量なものを使っていきたい。
Hugo でも画像サイズやフォーマットの変換を行う機能は[[https://gohugo.io/content-management/image-processing/][提供されている]]。
しかし、Hugo に関する知識をインプットしないといけないのに加えて、
こちらも実現するためにはテーマの上書きが必要だろう。
私が使いたいと思ったテーマはこれらの変換に対応していなかった。

*** front matter の扱い

Markdown では YAML front matter と呼ばれるメタデータを記述するための記法が広く使われている。
Hugo でも記事のタイトルや作成日、ドラフトといった情報を front matter に書き、
ページ生成時に記述されたデータを利用している。
front matter では YAML、TOML、JSON といったフォーマットが利用できるが、
どれも構造化されたデータ構造の記述が可能となっている。
そのため、提供されているテーマでも front matter で構造化されたデータを記述し、
それによってページの生成を行っているものがある。例えば、記事のカバー画像の設定といったものだ。

一方で Org Mode のキーワード (=#+KEYWORD:= から始まる行 (=KEYWORD= は任意の文字列)) は
構造化されたデータを記述することはできない。
仮に行うのであれば =#+KEYWORD[PROPERTY]:= のような記述を独自にパースして解釈できるようにするか、
キーワードの値に構造化されたデータを記述するための構文を定めて解釈するようにするといった対応が必要になる。
いずれにせよ、Org Mode のキーワードは構造化されたデータを標準でサポートするための取り決めがされていない。
これが原因で Hugo で提供されているテーマを使う場合に Org Mode で記事を記述すると、
front matter で有効にする機能が使えない問題が発生した。

*** テンプレートエンジン

これまで伸べてきたように不満を解消しようとすればテーマを自作する道に行くしかない。
しかし、これを言ってはお終いだが Hugo で使われているテンプレートエンジンに対応する
コードを書いても再利用性に乏しすぎる。
せっかく Astro から JSX に移行したというのにこれでは本末転倒もいいところだろう。

そんなわけで Hugo への移行は失敗に終わった。

** uniorg があるじゃない

=unified= 、 =rehype=  のエコシステムはすばらしい。
Markdown であろうが Org Mode であろうが HTML を抽象化した構文木の前では皆平等なのだ。
このおかげでこれまで =rehype= の資産を再利用することができる。
=emoji= も使えるし、 =starry-night= も使える。
勿論、画像のリサイズ、フォーマットの変換だってできるし、 lazy loading も有効になっている。
数式だって使える。

パーフェクトだ、ウォルター。

あとは、このブログに基本的な機能を追加していけばいい。
それが手間ではあるのだが…。

** おわり

そんなわけで、結局 Hugo に浮気をした後に Hono SSG の構成に戻ってきた。
最小構成で難しいことは何もしていないのでやりたい事に対して直ぐに対応できるというのはいいことだ。

Next.js や Gatsby を使っても同じことはできるので、
これは Hono の利点というよりは JavaScript のエコシステムのお陰という側面も大きい。
しかし、Next.js や Gatsby に比べると Hono はフレームワーク都合による
お約束が圧倒的に少ないのでより多くの人におすすめできる選択肢だと思う。
