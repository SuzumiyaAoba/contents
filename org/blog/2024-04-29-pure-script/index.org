#+title: PureScript に入門する
#+date: 2024-04-29
#+tags[]: プログラミング PureScript
#+categories[]: プログラミング
#+draft: false

** はじめに

毎年のことながら GW は特に予定がないので家に引き籠っている。
今年は EVO Japan が開催されていたので土曜日から月曜日にかけては娯楽があった。
明日からは暇になってしまうので、折角だから PureScript に触れてみようと思う。

関数型プログラミング回りの実装テクニックを思い出すために Haskell か Scala を
使って何かコードを書こうかとも思ったがまとまった時間を確保できる (はず) なので
これまで興味はあったものの触ったことがなかった PureScript がどんなものなのか触ってみる。

先日届いた Rainy75 の打ち心地ちがいいのでキーボードを触っていたいというのもある。

** 入門

日本語のまとまった情報はなさそうなので (あったとしてもやることは変わらないが…)、
[[https://www.purescript.org/][公式サイト]] にある [[https://github.com/purescript/documentation/blob/master/guides/Getting-Started.md][Quick Start Guide]] から見ていこう。

*** 準備

まずはコンパイラのインストールからだ。
コンパイラのインストールは =npm= コマンドでグローバルにインストールする。

#+begin_src console
$ npm install -g purescript
#+end_src

Home Manager を使っているので、私は Nix の設定ファイルを追加する。

https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/development/compilers/purescript/purescript/default.nix

コンパイラは =purs= という名前で実行できるようだ。

PureScript のパッケージマネージャとして [[https://github.com/spacchetti/spago][Spacgo]] が推奨されているのでこちらもインストールする。
コンパイラと同様に =npm= コマンドでグローバルにインストールする。

#+begin_src console
$ npm install -g spago
#+end_src

こちらも同様に私の場合は Nix の設定ファイルに追加する。

どうやら =purs=, =spago= の公式パッケージが[[https://github.com/NixOS/nixpkgs/issues/253198][壊れてしまっている]]ようなので [[https://github.com/thomashoneyman/purescript-overlay][overlay]] を使わないといけない。
README.md に書いてある設定を加えたところ =purs=, =spago= をそれぞれインストールできた。
overlay で上書けるのは Nix のいいところだが、公式パッケージはビルドが成功する状態を維持して欲しいものだ…。

次にプロジェクトを作成する。学習目的に使うプロジェクトを作る。

#+begin_src console
$ mkdir pure-pure
$ cd pure-pure
$ spago init
#+end_src

プロジェクト名は pure と聴いて思い浮んだ PurePure にした。

#+HTML: <lite-youtube videoid="bbDjmuFt7dE"></lite-youtube>

コマンドを実行するとファイルが生成される。

#+begin_src txt
.
├── spago.yaml
├── src
│   └── Main.purs
└── test
    └── Test
        └── Main.purs

4 directories, 3 files
#+end_src

=Main.purs= には Hello, World 相当のコードが書かれていた。

#+begin_src Main.purs
module Main where

import Prelude

import Effect (Effect)
import Effect.Console (log)

main :: Effect Unit
main = do
  log "🍝"
#+end_src

ビルドは =spago build=, 実行は =spago run=, テストは =spago test= で実行できるようだ。
お試しでは REPL を使う文化なのだろうか。REPL の実行は =spago repl= になっている。

次は依存ライブラリのインストール。
=lists= をわざわざインストールしているということは標準ライブラリにリストは含まれていないということだろうか。

#+begin_src console
$ spago install lists foldable-traversable
#+end_src


*** Project Euler #1

Quick Start Guide では Project Euler の最初の問題が例として載っている。
どこまで解いたか忘れてしまったが、大学生のときに順番に解いていたのを思い出す。
REPL で解く例が書かれているので従ってみる。

#+begin_src repl.purs
purs: <stdin>: hGetChar: hardware fault (Input/output error)
spago repl

Reading Spago workspace configuration...

✅ Selecting package to build: pure-pure

Downloading dependencies...
PSCi, version 0.15.15
Type :? for help


import Prelude

> import Data.List
> range 0 999
(0 : 1 : 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 : 22 : 23 : 24 : 25 : 26 : 27 : 28 : 29 : 30 : 31 : 32 : 33 : 34 : 35 : 36 : 37 : 38 : 39 : 40 : 41 : 42 : 43 : 44 : 45 : 46 : 47 : 48 : 49 : 50 : 51 : 52 : 53 : 54 : 55 : 56 : 57 : 58 : 59 : 60 : 61 : 62 : 63 : 64 : 65 : 66 : 67 : 68 : 69 : 70 : 71 : 72 : 73 : 74 : 75 : 76 : 77 : 78 : 79 : 80 : 81 : 82 : 83 : 84 : 85 : 86 : 87 : 88 : 89 : 90 : 91 : 92 : 93 : 94 : 95 : 96 : 97 : 98 : 99 : 100 : 101 : 102 : 103 : 104 : 105 : 106 : 107 : 108 : 109 : 110 : 111 : 112 : 113 : 114 : 115 : 116 : 117 : 118 : 119 : 120 : 121 : 122 : 123 : 124 : 125 : 126 : 127 : 128 : 129 : 130 : 131 : 132 : 133 : 134 : 135 : 136 : 137 : 138 : 139 : 140 : 141 : 142 : 143 : 144 : 145 : 146 : 147 : 148 : 149 : 150 : 151 : 152 : 153 : 154 : 155 : 156 : 157 : 158 : 159 : 160 : 161 : 162 : 163 : 164 : 165 : 166 : 167 : 168 : 169 : 170 : 171 : 172 : 173 : 174 : 175 : 176 : 177 : 178 : 179 : 180 : 181 : 182 : 183 : 184 : 185 : 186 : 187 : 188 : 189 : 190 : 191 : 192 : 193 : 194 : 195 : 196 : 197 : 198 : 199 : 200 : 201 : 202 : 203 : 204 : 205 : 206 : 207 : 208 : 209 : 210 : 211 : 212 : 213 : 214 : 215 : 216 : 217 : 218 : 219 : 220 : 221 : 222 : 223 : 224 : 225 : 226 : 227 : 228 : 229 : 230 : 231 : 232 : 233 : 234 : 235 : 236 : 237 : 238 : 239 : 240 : 241 : 242 : 243 : 244 : 245 : 246 : 247 : 248 : 249 : 250 : 251 : 252 : 253 : 254 : 255 : 256 : 257 : 258 : 259 : 260 : 261 : 262 : 263 : 264 : 265 : 266 : 267 : 268 : 269 : 270 : 271 : 272 : 273 : 274 : 275 : 276 : 277 : 278 : 279 : 280 : 281 : 282 : 283 : 284 : 285 : 286 : 287 : 288 : 289 : 290 : 291 : 292 : 293 : 294 : 295 : 296 : 297 : 298 : 299 : 300 : 301 : 302 : 303 : 304 : 305 : 306 : 307 : 308 : 309 : 310 : 311 : 312 : 313 : 314 : 315 : 316 : 317 : 318 : 319 : 320 : 321 : 322 : 323 : 324 : 325 : 326 : 327 : 328 : 329 : 330 : 331 : 332 : 333 : 334 : 335 : 336 : 337 : 338 : 339 : 340 : 341 : 342 : 343 : 344 : 345 : 346 : 347 : 348 : 349 : 350 : 351 : 352 : 353 : 354 : 355 : 356 : 357 : 358 : 359>  : 360 : 361 : 362 : 363 : 364 : 365 : 366 : 367 : 368 : 369 : 370 : 371 : 372 : 373 : 374 : 375 : 376 : 377 : 378 : 379 : 380 : 381 : 382 : 383 : 384 : 385 : 386 : 387 : 388 : 389 : 390 : 391 : 392 : 393 : 394 : 395 : 396 : 397 : 398 : 399 : 400 : 401 : 402 : 403 : 404 : 405 : 406 : 407 : 408 : 409 : 410 : 411 : 412 : 413 : 414 : 415 : 416 : 417 : 418 : 419 : 420 : 421 : 422 : 423 : 424 : 425 : 426 : 427 : 428 : 429 : 430 : 431 : 432 : 433 : 434 : 435 : 436 : 437 : 438 : 439 : 440 : 441 : 442 : 443 : 444 : 445 : 446 : 447 : 448 : 449 : 450 : 451 : 452 : 453 : 454 : 455 : 456 : 457 : 458 : 459 : 460 : 461 : 462 : 463 : 464 : 465 : 466 : 467 : 468 : 469 : 470 : 471 : 472 : 473 : 474 : 475 : 476 : 477 : 478 : 479 : 480 : 481 : 482 : 483 : 484 : 485 : 486 : 487 : 488 : 489 : 490 : 491 : 492 : 493 : 494 : 495 : 496 : 497 : 498 : 499 : 500 : 501 : 502 : 503 : 504 : 505 : 506 : 507 : 508 : 509 : 510 : 511 : 512 : 513 : 514 : 515 : 516 : 517 : 518 : 519 : 520 : 521 : 522 : 523 : 524 : 525 : 526 : 527 : 528 : 529 : 530 : 531 : 532 : 533 : 534 : 535 : 536 : 537 : 538 : 539 : 540 : 541 : 542 : 543 : 544 : 545 : 546 : 547 : 548 : 549 : 550 : 551 : 552 : 553 : 554 : 555 : 556 : 557 : 558 : 559 : 560 : 561 : 562 : 563 : 564 : 565 : 566 : 567 : 568 : 569 : 570 : 571 : 572 : 573 : 574 : 575 : 576 : 577 : 578 : 579 : 580 : 581 : 582 : 583 : 584 : 585 : 586 : 587 : 588 : 589 : 590 : 591 : 592 : 593 : 594 : 595 : 596 : 597 : 598 : 599 : 600 : 601 : 602 : 603 : 604 : 605 : 606 : 607 : 608 : 609 : 610 : 611 : 612 : 613 : 614 : 615 : 616 : 617 : 618 : 619 : 620 : 621 : 622 : 623 : 624 : 625 : 626 : 627 : 628 : 629 : 630 : 631 : 632 : 633 : 634 : 635 : 636 : 637 : 638 : 639 : 640 : 641 : 642 : 643 : 644 : 645 : 646 : 647 : 648 : 649 : 650 : 651 : 652 : 653 : 654 : 655 : 656 : 657 : 658 : 659 : 660 : 661 : 662 : 663 : 664 : 665 : 666 : 667 : 668 : 669 : 670 : 671 : 672 : 673 : 674 : 675 : 676 : 677 : 678 : 679 : 680 : 681 : 682 : 683 : 684 : 685 : 686 : 687 : 688 : 689 : 690 : 691 : 692 : 693 : 694 : 695 : 696 : 697 : 698 : 699 : 700 : 701 : 702 : 703 : 704 : 705 : 706 : 707 : 708 : 709 : 710 : 711 : 712 : 713 : 714 : 715 : 716 : 717 : 718 : 719 : 720 : 721 : 722 : 723 : 724 : 725 : 726 : 727 : 728 : 729 : 730 : 731 : 732 : 733 : 734 : 735 : 736 : 737 : 738 : 739 : 740 : 741 : 742 : 743 : 744 : 745 : 746 : 747 : 748 : 749 : 750 : 751 : 752 : 753 : 754 : 755 : 756 : 757 : 758 : 759 : 760 : 761 : 762 : 763 : 764 : 765 : 766 : 767 : 768 : 769 : 770 : 771 : 772 : 773 : 774 : 775 : 776 : 777 : 778 : 779 : 780 : 781 : 782 : 783 : 784 : 785 : 786 : 787 : 788 : 789 : 790 : 791 : 792 : 793 : 794 : 795 : 796 : 797 : 798 : 799 : 800 : 801 : 802 : 803 : 804 : 805 : 806 : 807 : 808 : 809 : 810 : 811 : 812 : 813 : 814 : 815 : 816 : 817 : 818 : 819 : 820 : 821 : 822 : 823 : 824 : 825 : 826 : 827 : 828 : 829 : 830 : 831 : 832 : 833 : 834 : 835 : 836 : 837 : 838 : 839 : 840 : 841 : 842 : 843 : 844 : 845 : 846 : 847 : 848 : 849 : 850 : 851 : 852 : 853 : 854 : 855 : 856 : 857 : 858 : 859 : 860 : 861 : 862 : 863 : 864 : 865 : 866 : 867 : 868 : 869 : 870 : 871 : 872 : 873 : 874 : 875 : 876 : 877 : 878 : 879 : 880 : 881 : 882 : 883 : 884 : 885 : 886 : 887 : 888 : 889 : 890 : 891 : 892 : 893 : 894 : 895 : 896 : 897 : 898 : 899 : 900 : 901 : 902 : 903 : 904 : 905 : 906 : 907 : 908 : 909 : 910 : 911 : 912 : 913 : 914 : 915 : 916 : 917 : 918 : 919 : 920 : 921 : 922 : 923 : 924 : 925 : 926 : 927 : 928 : 929 : 930 : 931 : 932 : 933 : 934 : 935 : 936 : 937 : 938 : 939 : 940 : 941 : 942 : 943 : 944 : 945 : 946 : 947 : 948 : 949 : 950 : 951 : 952 : 953 : 954 : 955 : 956 : 957 : 958 : 959 : 960 : 961 : 962 : 963 : 964 : 965 : 966 : 967 : 968 : 969 : 970 : 971 : 972 : 973 : 974 : 975 : 976 : 977 : 978 : 979 : 980 : 981 : 982 : 983 : 984 : 985 : 986 : 987 : 988 : 989 : 990 : 991 : 992 : 993 : 994 : 995 : 996 : 997 : 998 : 999 : Nil)


> ns = range 0 999
> multiples = filter (\n -> mod n 3 == 0 || mod n 5 == 0) ns
> multiples
(0 : 3 : 5 : 6 : 9 : 10 : 12 : 15 : 18 : 20 : 21 : 24 : 25 : 27 : 30 : 33 : 35 : 36 : 39 : 40 : 42 : 45 : 48 : 50 : 51 : 54 : 55 : 57 : 60 : 63 : 65 : 66 : 69 : 70 : 72 : 75 : 78 : 80 : 81 : 84 : 85 : 87 : 90 : 93 : 95 : 96 : 99 : 100 : 102 : 105 : 108 : 110 : 111 : 114 : 115 : 117 : 120 : 123 : 125 : 126 : 129 : 130 : 132 : 135 : 138 : 140 : 141 : 144 : 145 : 147 : 150 : 153 : 155 : 156 : 159 : 160 : 162 : 165 : 168 : 170 : 171 : 174 : 175 : 177 : 180 : 183 : 185 : 186 : 189 : 190 : 192 : 195 : 198 : 200 : 201 : 204 : 205 : 207 : 210 : 213 : 215 : 216 : 219 : 220 : 222 : 225 : 228 : 230 : 231 : 234 : 235 : 237 : 240 : 243 : 245 : 246 : 249 : 250 : 252 : 255 : 258 : 260 : 261 : 264 : 265 : 267 : 270 : 273 : 275 : 276 : 279 : 280 : 282 : 285 : 288 : 290 : 291 : 294 : 295 : 297 : 300 : 303 : 305 : 306 : 309 : 310 : 312 : 315 : 318 : 320 : 321 : 324 : 325 : 327 : 330 : 333 : 335 : 336 : 339 : 340 : 342 : 345 : 348 : 350 : 351 : 354 : 355 : 357 : 360 : 363 : 365 : 366 : 369 : 370 : 372 : 375 : 378 : 380 : 381 : 384 : 385 : 387 : 390 : 393 : 395 : 396 : 399 : 400 : 402 : 405 : 408 : 410 : 411 : 414 : 415 : 417 : 420 : 423 : 425 : 426 : 429 : 430 : 432 : 435 : 438 : 440 : 441 : 444 : 445 : 447 : 450 : 453 : 455 : 456 : 459 : 460 : 462 : 465 : 468 : 470 : 471 : 474 : 475 : 477 : 480 : 483 : 485 : 486 : 489 : 490 : 492 : 495 : 498 : 500 : 501 : 504 : 505 : 507 : 510 : 513 : 515 : 516 : 519 : 520 : 522 : 525 : 528 : 530 : 531 : 534 : 535 : 537 : 540 : 543 : 545 : 546 : 549 : 550 : 552 : 555 : 558 : 560 : 561 : 564 : 565 : 567 : 570 : 573 : 575 : 576 : 579 : 580 : 582 : 585 : 588 : 590 : 591 : 594 : 595 : 597 : 600 : 603 : 605 : 606 : 609 : 610 : 612 : 615 : 618 : 620 : 621 : 624 : 625 : 627 : 630 : 633 : 635 : 636 : 639 : 640 : 642 : 645 : 648 : 650 : 651 : 654 : 655 : 657 : 660 : 663 : 665 : 666 : 669 : 670 : 672 : 675 : 678 : 680 : 681 : 684 : 685 : 687 : 690 : 693 : 695 : 696 : 699 : 700 : 702 : 705 : 708 : 710 : 711 : 714 : 715 : 717 : 720 : 723 : 725 : 726 : 729 : 730 : 732 : 735 : 738 : 740 : 741 : 744 : 745 : 747 :>  750 : 753 : 755 : 756 : 759 : 760 : 762 : 765 : 768 : 770 : 771 : 774 : 775 : 777 : 780 : 783 : 785 : 786 : 789 : 790 : 792 : 795 : 798 : 800 : 801 : 804 : 805 : 807 : 810 : 813 : 815 : 816 : 819 : 820 : 822 : 825 : 828 : 830 : 831 : 834 : 835 : 837 : 840 : 843 : 845 : 846 : 849 : 850 : 852 : 855 : 858 : 860 : 861 : 864 : 865 : 867 : 870 : 873 : 875 : 876 : 879 : 880 : 882 : 885 : 888 : 890 : 891 : 894 : 895 : 897 : 900 : 903 : 905 : 906 : 909 : 910 : 912 : 915 : 918 : 920 : 921 : 924 : 925 : 927 : 930 : 933 : 935 : 936 : 939 : 940 : 942 : 945 : 948 : 950 : 951 : 954 : 955 : 957 : 960 : 963 : 965 : 966 : 969 : 970 : 972 : 975 : 978 : 980 : 981 : 984 : 985 : 987 : 990 : 993 : 995 : 996 : 999 : Nil)

import Data.Foldable
> sum multiples
233168

> :quit
See ya!
#+end_src

この手の REPL はデフォルトだと長い出力は省略することが多いけど全部表示してくれるようだ。
ここまでは正格評価であることを除けば Haskell と変わらない印象。

次に REPL ではなくファイルにコードを書いて、実行、テストまで行う。

#+begin_src src/Euler.purs
module Euler where

import Prelude

import Data.List (range, filter)
import Data.Foldable (sum)

ns = range 0 999

multiples = filter (\n -> mod n 3 == 0 || mod n 5 == 0) ns

answer = sum multiples
#+end_src

GitHub でサンプルコードを見たときは気がつかなかったけど VS Code にコードで書くと型が宣言されていないので警告が出た。
確かに Haskell 文化圏であればトップレベル関数には型宣言をする習慣があるはずだけど、
これはチュートリアルだから説明を省くために宣言されていないのかな。

テストのためにライブラリをインストール。

#+begin_src console
$ spago install assert
#+end_src

テストコードを書く。

#+begin_src test/Main.purs
module Test.Main where

import Prelude

import Euler (answer)
import Test.Assert (assert)

main = do
  assert (answer == 233168)
#+end_src

Quick Start Guide にさらっと書かれているけど =main= は =Effect= を返すようだ。
ここが Haskell との最初の違いかな。

#+begin_src console
$ spago test
Reading Spago workspace configuration...

✅ Selecting package to build: pure-pure

Downloading dependencies...
Building...
           Src   Lib   All
Warnings     0     0     0
Errors       0     0     0

✅ Build succeeded.

Running tests for package: pure-pure

✅ Test succeeded for package "pure-pure".
#+end_src

=spago test= を実行するとテストが成功する。

次に問題の答えを出力するように =src/Main.purs= を書き換える。

#+begin_src src/Main.purs
module Main where

import Prelude

import Euler (answer)
import Effect.Console (log)

main = do
  log ("The answer is " <> show answer)
#+end_src

最後に PureScript で書いたコードをブラウザで実行する。
しかし、ここで問題発生。Quick Start Guide には =spago bundle-app= コマンドを実行すると書かれているが、
=bundle-app= というコマンドが存在しない。

#+begin_src console
$ spago bundle-app
Invalid argument `bundle-app'

Usage: bundle.js (COMMAND | (-v|--version))
  PureScript package manager and build tool

Available options:
  -h,--help                Show this help text
  -v,--version             Show the current version

Available commands:
  init                     Initialise a new project
  fetch                    Downloads all of the project's dependencies
  install                  Compile the project's dependencies
  uninstall                Remove dependencies from a package
  build                    Compile the project
  run                      Run the project
  test                     Test the project
  bundle                   Bundle the project in a single file
  sources                  List all the source paths (globs) for the
                           dependencies of the project
  repl                     Start a REPL
  publish                  Publish a package
  upgrade                  Upgrade to the latest package set, or to the latest
                           versions of Registry packages
  docs                     Generate docs for the project and its dependencies
  registry                 Commands to interact with the Registry
  ls                       List packages or dependencies
  graph                    Generate a graph of modules or dependencies
#+end_src

=bundle= という名前に変わってしまったのだろうか。
試しに =spago bundle= を実行すると =esbuild= がないと怒られてしまう。

#+begin_src console
spago bundle
Reading Spago workspace configuration...

✅ Selecting package to build: pure-pure

Downloading dependencies...
Building...
           Src   Lib   All
Warnings     0     0     0
Errors       0     0     0

✅ Build succeeded.


❌ Failed to find esbuild. Have you installed it, and is it in your PATH?
#+end_src

仕方がないので [[https://esbuild.github.io/][esbuild]] をインストールする。

#+begin_src console
$ npm install -g esbuild
#+end_src

Home Manager を使っている人は [[https://search.nixos.org/packages?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=esbuild][esbuild]] を設定に追加しましょう。

#+begin_src console
$ spago bundle
Reading Spago workspace configuration...

✅ Selecting package to build: pure-pure

Downloading dependencies...
Building...
           Src   Lib   All
Warnings     0     0     0
Errors       0     0     0

✅ Build succeeded.

Bundling...

  index.js  9.9kb

⚡ Done in 20ms

✅ Bundle succeeded.
#+end_src

=esbuild= がパスに追加されていればコンパイルが通る。
ビルドに成功すると =index.js= がプロジェクトのルートに出力される。
=index.js= を読み込む HTML ファイルを追加する。

#+begin_src index.html
<!DOCTYPE html>
<html>

  <head>
    <meta charset="UTF-8">
    <title>Euler Exercise</title>
  </head>

  <body>
    <script src="./index.js"></script>
  </body>

</html>
#+end_src

=index.html= をブラウザで開いて Developer Tools で Console を確認すると答えが出力されている。

[[./images/console.png]]

これでコーディングからブラウザ上での実行方法がわかったが、ホットリロードできるようになりたい。
少しだけ調べてみると =spago= の =watch= と =live-server= を組み合わせることで実現できるようだ。
PureScript の構文を一通り見てから試してみる。
